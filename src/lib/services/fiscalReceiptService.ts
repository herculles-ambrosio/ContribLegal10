import * as cheerio from 'cheerio';

// Constantes para depura√ß√£o
const DEBUG = true;  // Habilitar logs detalhados
const REDUCED_TIMEOUT = false;  // Se true, usa timeout reduzido para testes r√°pidos

export interface FiscalReceiptData {
  numeroDocumento?: string;
  valor?: string;
  dataEmissao?: string;
  error?: string;
}

/**
 * Servi√ßo para extrair dados de cupom fiscal da SEFAZ MG a partir do link do QR Code
 * @param qrCodeLink Link do QR Code do cupom fiscal
 * @param apiBaseUrl URL base da API (opcional, usado quando acessado de fora)
 */
export async function extractDataFromFiscalReceipt(
  qrCodeLink: string, 
  apiBaseUrl?: string
): Promise<FiscalReceiptData> {
  try {
    // IMPORTANTE: Logs iniciais detalhados
    if (DEBUG) console.log('üîç [INICIO EXTRACAO] Link recebido:', qrCodeLink);
    
    // Normalizar URL - remover espa√ßos e caracteres estranhos
    const normalizedLink = qrCodeLink.trim();
    if (DEBUG) console.log('üîç Link normalizado:', normalizedLink);
    
    // Determinar a URL da API baseado no ambiente
    const apiUrl = apiBaseUrl 
      ? `${apiBaseUrl}/api/fiscal-receipt` 
      : '/api/fiscal-receipt';

    if (DEBUG) console.log('üîç URL da API:', apiUrl);

    // Fazer requisi√ß√£o para nossa API com timeout aumentado
    // Timeout aumentado para 60 segundos (ou 10 segundos no modo teste)
    const controller = new AbortController();
    const timeoutDuration = REDUCED_TIMEOUT ? 10000 : 60000; // 10 ou 60 segundos
    const timeoutId = setTimeout(() => {
      if (DEBUG) console.log('‚ö†Ô∏è TIMEOUT ACIONADO! Abortando requisi√ß√£o ap√≥s', timeoutDuration/1000, 'segundos');
      controller.abort();
    }, timeoutDuration);
    
    // CRUCIAL: Garantir que o link √© preservado como numeroDocumento
    // independentemente do que acontecer durante a extra√ß√£o
    const linkCompleto = normalizedLink;
    if (DEBUG) console.log('üîí Link preservado como numeroDocumento:', linkCompleto);
    
    // Se n√£o for uma URL completa, tentar adicionar o protocolo
    let urlProcessada = normalizedLink;
    if (!urlProcessada.startsWith('http://') && !urlProcessada.startsWith('https://')) {
      urlProcessada = `https://${urlProcessada}`;
      if (DEBUG) console.log('üîç URL modificada com protocolo https:', urlProcessada);
    }

    try {
      // NOVA ABORDAGEM: Pr√©-processamento agressivo para extrair dados diretamente da URL
      // antes mesmo de fazer qualquer requisi√ß√£o
      if (DEBUG) console.log('üîç Iniciando pr√©-extra√ß√£o direta do link...');
      let preValor: string | undefined = undefined;
      let preData: string | undefined = undefined;
      
      // 1. Tentar acessar a URL em modo text-only para extra√ß√£o r√°pida
      try {
        if (DEBUG) console.log('üåê Tentando acessar a URL diretamente:', urlProcessada);
        
        // Requisi√ß√£o preliminar com timeout reduzido
        const preController = new AbortController();
        const preTimeoutId = setTimeout(() => preController.abort(), 5000); // 5 segundos apenas
        
        const preResponse = await fetch(urlProcessada, {
          method: 'GET',
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
          },
          signal: preController.signal,
        });
        
        clearTimeout(preTimeoutId);
        
        if (preResponse.ok) {
          const text = await preResponse.text();
          if (DEBUG) console.log('üåê Pr√©-resposta OK. Tamanho do texto:', text.length, 'bytes');
          
          // Extrair valor usando regex agressivo
          const valorMatches = text.match(/(?:Valor Total|Total|Valor)(?:\s*R\$)?[\s:]*([0-9]+[,.][0-9]{2})/i) ||
                               text.match(/(?:R\$)\s*([0-9]+[,.][0-9]{2})/i) ||
                               text.match(/([0-9]+,[0-9]{2})/);
          
          if (valorMatches && valorMatches[1]) {
            preValor = valorMatches[1].replace('.', '').replace(',', '.');
            if (DEBUG) console.log('üí∞ Valor pr√©-extra√≠do diretamente da p√°gina:', preValor);
          }
          
          // Extrair data usando regex agressivo
          const dataMatches = text.match(/(?:Data(?:\s*de)?\s*Emiss√£o|Emiss√£o)(?:\s*:)?\s*([0-9]{2}\/[0-9]{2}\/[0-9]{4})/i) ||
                              text.match(/([0-9]{2}\/[0-9]{2}\/[0-9]{4})/);
          
          if (dataMatches && dataMatches[1]) {
            preData = dataMatches[1];
            if (DEBUG) console.log('üìÖ Data pr√©-extra√≠da diretamente da p√°gina:', preData);
          }
        }
      } catch (preError) {
        if (DEBUG) console.log('‚ö†Ô∏è Erro na pr√©-extra√ß√£o direta:', preError);
        // Continuar mesmo com erro - isso √© apenas uma tentativa extra
      }
      
      // 2. Tentar extrair da URL (busca-se nos par√¢metros de query)
      try {
        const urlObj = new URL(urlProcessada);
        const params = new URLSearchParams(urlObj.search);
        
        // Tentar extrair valor de par√¢metros comuns
        const possiveisValores = [
          params.get('vNF'),
          params.get('valor'),
          params.get('valorTotal'),
          params.get('total'),
          params.get('vPag')
        ];
        
        for (const val of possiveisValores) {
          if (val && !isNaN(parseFloat(val.replace(',', '.')))) {
            if (!preValor) { // S√≥ substitui se n√£o tiver extra√≠do antes
              preValor = val.replace(',', '.');
              if (DEBUG) console.log('üí∞ Valor pr√©-extra√≠do dos par√¢metros URL:', preValor);
            }
            break;
          }
        }
        
        // Tentar extrair data de par√¢metros comuns
        const possiveisDatas = [
          params.get('dhEmi'),
          params.get('data'),
          params.get('dataEmissao'),
          params.get('dEmi')
        ];
        
        for (const data of possiveisDatas) {
          if (data && data.match(/\d{2}[\/\.-]\d{2}[\/\.-]\d{4}|\d{4}[\/\.-]\d{2}[\/\.-]\d{2}/)) {
            if (!preData) { // S√≥ substitui se n√£o tiver extra√≠do antes
              preData = data;
              if (DEBUG) console.log('üìÖ Data pr√©-extra√≠da dos par√¢metros URL:', preData);
            }
            break;
          }
        }
      } catch (linkError) {
        if (DEBUG) console.warn('‚ö†Ô∏è Erro ao tentar extrair dados dos par√¢metros da URL:', linkError);
      }

      // Fazer requisi√ß√£o para a API principal
      if (DEBUG) console.log('üåê Enviando requisi√ß√£o para API principal...');
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          qrCodeLink: urlProcessada,
          preExtractedValor: preValor,  
          preExtractedData: preData
        }),
        signal: controller.signal,
      });

      // Limpar timeout
      clearTimeout(timeoutId);

      if (!response.ok) {
        if (DEBUG) console.error('‚ùå Erro na API:', response.status);
        
        // ABORDAGEM ROBUSTA: Se a API falhar mas temos dados pr√©-extra√≠dos, usamos esses
        if (preValor || preData) {
          if (DEBUG) console.log('üõü Usando dados pr√©-extra√≠dos devido a falha na API');
          const fallbackResult = {
            numeroDocumento: linkCompleto, // CRUCIAL: O link completo √© o n√∫mero do documento
            valor: preValor,
            dataEmissao: preData
          };
          
          return fallbackResult;
        }
        
        // Mesmo se n√£o tiver outros dados, garantimos que o n√∫mero do documento est√° preenchido
        return {
          error: `Erro ao acessar a API: ${response.status}`,
          numeroDocumento: linkCompleto // CRUCIAL: Sempre retornar o link como n√∫mero do documento
        };
      }

      const data = await response.json();
      if (DEBUG) console.log('‚úÖ Dados recebidos da API:', data);
      
      // AQUI EST√Å A CORRE√á√ÉO PRINCIPAL:
      // Iniciar com o link completo como n√∫mero do documento
      // independente do que a API retornou
      const result: FiscalReceiptData = {
        numeroDocumento: linkCompleto, // CRUCIAL: Sempre garantir que √© o link original, n√£o o que a API retornou
        valor: data.valor,
        dataEmissao: data.dataEmissao,
      };

      if (DEBUG) console.log('üîç Iniciando valida√ß√£o e formata√ß√£o dos dados recebidos...');

      // Processamento adicional para garantir a validade do valor
      if (result.valor) {
        try {
          // Tratar valores num√©ricos inv√°lidos
          let valorProcessado = result.valor;
          
          // Remover caracteres n√£o num√©ricos, exceto v√≠rgula e ponto
          valorProcessado = valorProcessado.replace(/[^\d,\.]/g, '');
          
          // Substituir pontos por nada (assumindo que s√£o separadores de milhar)
          valorProcessado = valorProcessado.replace(/\./g, '');
          
          // Substituir v√≠rgula por ponto para opera√ß√µes num√©ricas
          valorProcessado = valorProcessado.replace(',', '.');
          
          // Converter para n√∫mero e verificar validade
          const valorNumerico = parseFloat(valorProcessado);
          
          if (isNaN(valorNumerico) || valorNumerico <= 0) {
            if (DEBUG) console.warn('‚ö†Ô∏è Valor inv√°lido da API:', result.valor);
            
            // Se temos um valor pr√©-extra√≠do, usar ele como fallback
            if (preValor && !isNaN(parseFloat(preValor))) {
              const valorPreNumerico = parseFloat(preValor);
              result.valor = valorPreNumerico.toFixed(2).replace('.', ',');
              if (DEBUG) console.log('üí∞ Usando valor pr√©-extra√≠do como fallback:', result.valor);
            } else {
              result.valor = undefined;
            }
          } else {
            // Formata√ß√£o para padr√£o brasileiro (com v√≠rgula como separador decimal)
            result.valor = valorNumerico.toFixed(2).replace('.', ',');
            if (DEBUG) console.log('üí∞ Valor processado com sucesso:', result.valor);
          }
        } catch (e) {
          if (DEBUG) console.error('‚ùå Erro ao processar valor:', e);
          
          // Tentar usar valor pr√©-extra√≠do em caso de erro
          if (preValor && !isNaN(parseFloat(preValor))) {
            const valorPreNumerico = parseFloat(preValor);
            result.valor = valorPreNumerico.toFixed(2).replace('.', ',');
            if (DEBUG) console.log('üí∞ Usando valor pr√©-extra√≠do ap√≥s erro:', result.valor);
          } else {
            result.valor = undefined;
          }
        }
      } else if (preValor && !isNaN(parseFloat(preValor))) {
        // Se a API n√£o retornou valor mas temos um valor pr√©-extra√≠do, usar ele
        const valorPreNumerico = parseFloat(preValor);
        result.valor = valorPreNumerico.toFixed(2).replace('.', ',');
        if (DEBUG) console.log('üí∞ Usando valor pr√©-extra√≠do (API n√£o retornou valor):', result.valor);
      }
      
      // Processamento adicional para garantir a validade da data
      if (result.dataEmissao) {
        try {
          // Normalizar formato da data
          let dataProcessada = result.dataEmissao.trim();
          
          // Verificar formato e converter para DD/MM/YYYY se necess√°rio
          if (/^\d{4}[-\/]\d{2}[-\/]\d{2}$/.test(dataProcessada)) {
            // Formato YYYY-MM-DD ou YYYY/MM/DD
            const separador = dataProcessada.includes('-') ? '-' : '/';
            const [ano, mes, dia] = dataProcessada.split(separador);
            dataProcessada = `${dia}/${mes}/${ano}`;
          } else if (/^\d{2}[-\.]\d{2}[-\.]\d{4}$/.test(dataProcessada)) {
            // Formato DD-MM-YYYY ou DD.MM.YYYY
            const partes = dataProcessada.split(/[-\.]/);
            dataProcessada = `${partes[0]}/${partes[1]}/${partes[2]}`;
          }
          // Manter formato DD/MM/YYYY como est√°
          
          result.dataEmissao = dataProcessada;
          if (DEBUG) console.log('üìÖ Data processada com sucesso:', result.dataEmissao);
        } catch (e) {
          if (DEBUG) console.error('‚ùå Erro ao processar data:', e);
          
          // Tentar usar data pr√©-extra√≠da em caso de erro
          if (preData) {
            result.dataEmissao = preData;
            if (DEBUG) console.log('üìÖ Usando data pr√©-extra√≠da ap√≥s erro:', result.dataEmissao);
          } else {
            // Usar data atual como fallback somente se necess√°rio
            const hoje = new Date();
            const dia = String(hoje.getDate()).padStart(2, '0');
            const mes = String(hoje.getMonth() + 1).padStart(2, '0');
            const ano = hoje.getFullYear();
            result.dataEmissao = `${dia}/${mes}/${ano}`;
            if (DEBUG) console.log('üìÖ Usando data atual como fallback:', result.dataEmissao);
          }
        }
      } else if (preData) {
        // Se a API n√£o retornou data mas temos uma data pr√©-extra√≠da, usar ela
        result.dataEmissao = preData;
        if (DEBUG) console.log('üìÖ Usando data pr√©-extra√≠da (API n√£o retornou data):', result.dataEmissao);
      } else {
        // Se n√£o tem nenhuma data, usar a data atual
        const hoje = new Date();
        const dia = String(hoje.getDate()).padStart(2, '0');
        const mes = String(hoje.getMonth() + 1).padStart(2, '0');
        const ano = hoje.getFullYear();
        result.dataEmissao = `${dia}/${mes}/${ano}`;
        if (DEBUG) console.log('üìÖ Usando data atual (n√£o h√° dados de data):', result.dataEmissao);
      }

      // VERIFICA√á√ÉO FINAL DE SEGURAN√áA
      // Garantir que o n√∫mero do documento continua sendo o link completo
      if (result.numeroDocumento !== linkCompleto) {
        if (DEBUG) console.warn('‚ö†Ô∏è CORRE√á√ÉO: N√∫mero do documento foi modificado, restaurando...');
        result.numeroDocumento = linkCompleto;
      }

      if (DEBUG) console.log('‚úÖ [FIM EXTRACAO] Dados finais retornados pelo servi√ßo:', result);
      return result;
    } catch (error) {
      // Limpar timeout em caso de erro
      clearTimeout(timeoutId);
      
      if (error instanceof Error && error.name === 'AbortError') {
        if (DEBUG) console.error('‚è±Ô∏è TIMEOUT: A requisi√ß√£o para a API excedeu o tempo limite.');
        return {
          error: 'A requisi√ß√£o para a API excedeu o tempo limite.',
          numeroDocumento: linkCompleto // CRUCIAL: Garantir que pelo menos o n√∫mero do documento (link) seja retornado
        };
      }
      
      if (DEBUG) console.error('‚ùå Erro durante a extra√ß√£o de dados:', error);
      return {
        error: error instanceof Error ? error.message : 'Erro desconhecido',
        numeroDocumento: linkCompleto // CRUCIAL: Garantir que pelo menos o n√∫mero do documento (link) seja retornado
      };
    }
  } catch (generalError) {
    if (DEBUG) console.error('‚ùå Erro geral na extra√ß√£o:', generalError);
    return {
      error: generalError instanceof Error ? generalError.message : 'Erro desconhecido na extra√ß√£o',
      numeroDocumento: qrCodeLink // CRUCIAL: Garantir que pelo menos o n√∫mero do documento (link) seja retornado
    };
  }
} 